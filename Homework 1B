#include <iostream>
#include <string>

using namespace std;

const int N = 5;
class Check {
private:
    int CheckNum;
    string CheckMemo;
    float CheckAmount;

public:
    Check() : CheckNum(0), CheckMemo(""), CheckAmount(0) {}

    int getCheckNum() const { return CheckNum; }
    void setCheckNum(int num) { CheckNum = num; }

    string getCheckMemo() const { return CheckMemo; }
    void setCheckMemo(const string& memo) { CheckMemo = memo; }

    float getCheckAmount() const { return CheckAmount; }
    void setCheckAmount(float amount) { CheckAmount = amount; }
};

class CheckBook {
private:
    float balance, lastDeposit;
    Check checks[N];
    int numOfChecks;
    const int checkLimit;
    static int allChecks;

public:
    CheckBook() : balance(0), lastDeposit(0), numOfChecks(0), checkLimit(N) {}

    CheckBook(float initialBalance) : balance(initialBalance), lastDeposit(0), numOfChecks(0), checkLimit(N) {}

    void deposit(float amount) {
        balance += amount;
        lastDeposit = amount;
    }

    void displayChecks() {
        cout << "Check History:" << endl;
        for (int i = numOfChecks - 1; i >= 0; --i) {
            cout << checks[i].getCheckAmount() << " " << checks[i].getCheckNum() << " " << checks[i].getCheckMemo() << endl;
        }
    }

    bool writeCheck(float amount) {
        if (amount <= balance && numOfChecks < checkLimit && allChecks < 10) {
            cout << "Balance: $" << balance << endl;
            cout << "Enter details for the check:" << endl;
            cout << "Memo: ";
            string memo;
            cin >> memo;

            checks[numOfChecks].setCheckNum(numOfChecks + 1);
            checks[numOfChecks].setCheckMemo(memo);
            checks[numOfChecks].setCheckAmount(amount);

            balance -= amount;
            numOfChecks++;
            allChecks++;

            return true;
        } else {
            cout << "Cannot write a check. ";
            if (amount > balance) {
                cout << "Your balance is too low!" << endl;
                cout << "Remaining Balance: $" << balance << endl;
            } else if (numOfChecks >= checkLimit) {
                cout << "Check limit reached!" << endl;
            } else if (allChecks >= 10) {
                cout << "Maximum checks limit reached!" << endl;
            }
            return false;
        }
    }

    static int getallChecks() {
        return allChecks;
    }
};

int CheckBook::allChecks = 0;

int main() {
    CheckBook cb1(1000), cb2(500);

    for (int i = 0; i < 10; ++i) {
        cb1.writeCheck(150);
        cb2.writeCheck(130);
    }

    cout << "cb1 check details" << endl;
    cb1.displayChecks();

    cout << "cb2 check details" << endl;
    cb2.displayChecks();

    cout << cb1.getallChecks() << endl;
    cout << cb2.getallChecks() << endl;

    return 0;
}
